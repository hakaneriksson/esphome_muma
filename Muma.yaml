substitutions:
  name: muma1
  friendly_name: Muma 1
  
  font_glyphsets: "GF_Latin_Core"
  font_family: Figtree

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  name_add_mac_suffix: false

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  cpu_frequency: 240MHz
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      # Moves instructions and read only data from flash into PSRAM on boot.
      # Both enabled allows instructions to execute while a flash operation is in progress without needing to be placed in IRAM.
      # Considerably speeds up mWW at the cost of using more PSRAM.
      CONFIG_SPIRAM_RODATA: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: "y"

      CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST: "y"
      CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY: "y"

      CONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC: "y"
      CONFIG_MBEDTLS_SSL_PROTO_TLS1_3: "y"  # TLS1.3 support isn't enabled by default in IDF 5.1.5

psram:
  mode: octal
  speed: 80MHz

api:
  id: my_api
  on_client_connected:
    - lvgl.widget.hide: boot_screen
  on_client_disconnected:
    - lvgl.widget.show: boot_screen

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time_sync: 
      then:
        - lvgl.label.update:
              id: lbl_time
              text:
                format: "%02d:%02d"
                args: [ 'id(homeassistant_time).now().hour', 'id(homeassistant_time).now().minute' ] 
    on_time: 
      - seconds: 0
        minutes: '*'
        then:
          - lvgl.label.update:
              id: lbl_time
              text:
                format: "%02d:%02d"
                args: [ 'id(homeassistant_time).now().hour', 'id(homeassistant_time).now().minute' ]  

ota:
  - platform: esphome
    id: ota_esphome

logger:
  hardware_uart: USB_SERIAL_JTAG

wifi:
  id: my_wifi
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Muma Hotspot"
    password: "SECRET_PASSWORD"

captive_portal:

lvgl:
  displays:
    - my_lcd
  touchscreens:
    - my_touchscreen
  on_idle:
    timeout: 30s
    then:
      - lvgl.page.show:
          id: dashboard_page
  bg_color: 0x000000
  style_definitions:
    - id: style_footer
      bg_color: 0x1A1A1A
      bg_grad_color: 0x060606
      bg_grad_dir: VER
      bg_opa: COVER
      border_opa: TRANSP
      radius: 0
      pad_all: 0
      width: 100%
      height: 30

    - id: style_footer_button
      bg_opa: TRANSP
      border_width: 0
      shadow_width: 0
      radius: 0
      pad_all: 0
      height: 26
      width: 60
      text_color: 0xFFFFFF
      
    - id: style_button
      bg_color: 0x272727
      text_color: 0x4b4b4b
      width: 50
      height: 50
      radius: 25
      shadow_width: 0

    - id: style_button_checked
      bg_color: 0x1f2a23
      text_color: 0x9fe2bf

    - id: style_chat_container
      bg_opa: TRANSP
      pad_all: 5
      border_width: 0
      radius: 0
      text_font: font_chat

    - id: style_chat_row_box
      pad_all: 0
      bg_opa: TRANSP
      width: 100%
      height: SIZE_CONTENT
      border_width: 0

    - id: style_bubble_left
      bg_color: 0x1A1A1A
      text_color: 0xFFFFFF
      width: SIZE_CONTENT
      height: SIZE_CONTENT
      border_width: 0
      radius: 8
      pad_all: 8
      max_width: 200

    - id: style_bubble_right
      bg_color: 0x06402B
      text_color: 0xFFFFFF
      width: SIZE_CONTENT
      height: SIZE_CONTENT
      border_width: 0
      radius: 8
      pad_all: 8
      max_width: 200

  top_layer:
    widgets:
      - obj:
          id: footer_container
          align: bottom_mid
          outline_width: 0
          styles: style_footer
          layout:
            type: flex
            flex_flow: ROW
            flex_align_main: SPACE_AROUND
            flex_align_cross: CENTER
          widgets:
            - button:
                id: page_prev
                styles: style_footer_button
                widgets:
                  - label:
                      text: "\uF053"
                      align: center
                on_press:
                  then:
                    - lvgl.page.previous:
            - button:
                id: page_home
                styles: style_footer_button
                widgets:
                  - label:
                      id: lbl_time
                      text: "--:--"
                      align: center
                      text_font: montserrat_20
                on_press:
                  then:
                    - if:
                        condition:
                          not:
                            voice_assistant.is_running:
                        then:
                          - voice_assistant.start:
                        else:
                          - voice_assistant.stop:
            - button:
                id: page_next
                styles: style_footer_button
                widgets:
                  - label:
                      text: "\uF054"
                      align: center
                on_press:
                  then:
                    - lvgl.page.next:
        
      - obj:
          id: boot_screen
          x: 0
          y: 0
          width: 100%
          height: 100%
          bg_color: 0x000000
          bg_opa: COVER
          radius: 0
          pad_all: 0
          border_width: 0
          widgets:
            - spinner:
                align: CENTER
                height: 180
                width: 180
                spin_time: 2s
                arc_length: 60deg
                arc_width: 8
                arc_color: 0x272727
                indicator:
                  arc_color: 0x00ACAC
                  arc_width: 8
                widgets:
                  - label:
                      id: lbl_HA
                      align: CENTER
                      text_font: mdi_80
                      text: "\U000F07D0" # mdi-home-assistant
                      text_color: 0xFFFFFF
                
  pages:
    - id: dashboard_page   
      widgets:
        - label:
            id: room_title
            text: "Living room"
            x: 10
            y: 10
            text_font: montserrat_26
            text_color: 0xc0c0c0

        - label:
            id: room_status
            text: "-Â°C | -%"
            x: 10
            y: 40
            text_font: montserrat_20
            text_color: 0xc0c0c0

        - obj:
            id: sofa_circle
            x: -30
            y: 85
            width: 160
            height: 160
            radius: 80
            bg_color: 0x2e2a1b
            border_width: 0
            floating: true
            widgets:
              - label:
                  id: lbl_sofa
                  align: CENTER
                  text_font: mdi_80
                  text: "\U000F04B9" # mdi-sofa
                  text_color: 0xDE9931

        - button:
            id: btn_1
            x: 170
            y: 10
            checkable: true
            styles:
              - style_button
            checked:
              styles:
                - style_button_checked
            on_press:
              then:
                - homeassistant.service:
                    service: light.toggle
                    data:
                      entity_id: light.LIGHT_ID
            widgets:
              - label:
                  id: lbl_ceilingLight
                  align: CENTER
                  text_font: mdi_32
                  text: "\U000F0769" # mdi-ceiling-light

        - button:
            id: btn_2
            x: 170
            y: 80
            checkable: true
            styles:
              - style_button
            checked:
              styles:
                - style_button_checked
            widgets:
              - label:
                  id: lbl_ledstrip
                  align: CENTER
                  text_font: mdi_32
                  text: "\U000F1051" # mdi-led-strip

        - button:
            id: btn_3
            x: 170
            y: 150
            checkable: true
            styles:
              - style_button
            checked:
              styles:
                - style_button_checked
            widgets:
              - label:
                  id: lbl_lightbulb
                  align: CENTER
                  text_font: mdi_32
                  text: "\U000F0335" # mdi-lightbulb

    - id: ai_page
      widgets:
        - obj:
            id: chat_container
            width: 240
            height: 210
            styles: style_chat_container
            layout:
              type: flex
              flex_flow: column

    - id: media_page
      widgets:
        - label:
            id: media_title
            x: 10
            y: 35
            width: 220
            text_align: center
            text_font: montserrat_24
            text_color: 0xc0c0c0
            text: "Song title"

        - label:
            id: media_artist
            x: 10
            y: 65
            width: 220
            text_align: center
            text_font: montserrat_20
            text_color: 0xc0c0c0
            text: "Artist"

        - button:
            id: btn_media_previous
            x: 20
            y: 100
            bg_opa: TRANSP
            shadow_width: 0
            border_width: 0
            widgets:
              - label:
                  id: lbl_skip_previous
                  align: CENTER
                  text_font: mdi_40
                  text: "\U000F04AE" # mdi-skip-previous
                  text_color: 0xc0c0c0

        - button:
            id: btn_media_play_pause
            x: 75
            y: 90
            bg_opa: TRANSP
            shadow_width: 0
            border_width: 0
            widgets:
              - label:
                  id: lbl_play_pause
                  align: CENTER
                  text_font: mdi_60
                  text: "\U000F040C" # mdi-play-circle
                  text_color: 0xc0c0c0

        - button:
            id: btn_media_next
            x: 150
            y: 100
            bg_opa: TRANSP
            shadow_width: 0
            border_width: 0
            widgets:
              - label:
                  id: lbl_skip_next
                  align: CENTER
                  text_font: mdi_40
                  text: "\U000F04AD" # mdi-skip-next
                  text_color: 0xc0c0c0

        - slider:
            id: media_progress
            x: 20
            y: 170
            width: 200
            bg_color: 0xc0c0c0
            indicator:
              bg_color: 0xa35ea6
            knob:
              bg_color: 0xa35ea6

    - id: timer_page
      widgets:
        - arc:
            x: 30
            y: 15
            width: 180
            height: 180
            start_angle: 0
            end_angle: 360
            rotation: 270
            id: arc_timer
            value: 0
            min_value: 0
            max_value: 100
            adjustable: false
            arc_color: 0x272727
            indicator:
              arc_color: 0x00ACAC
              arc_rounded: false
            widgets:
              - label:
                  id: label_timer
                  align: center
                  text_align: center
                  text_font: montserrat_48
                  text_color: 0xc0c0c0
                  text: "00:00"
              - button:
                  id: btn_timer_end
                  align: center
                  bg_opa: TRANSP
                  shadow_width: 0
                  border_width: 0
                  hidden: true
                  on_press:
                    then:
                      - switch.turn_off: timer_ringing
                      - delay: 5s
                      - lvgl.page.show:
                          id: dashboard_page
                  widgets:
                    - label:
                        text_font: mdi_80
                        text: "\U000F009F" # mdi-bell-ring-outline
                        text_color: 0xF5D221      

font:
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_chat
    size: 16
    bpp: 4
    glyphsets: ${font_glyphsets}

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: mdi_32
    size: 32
    bpp: 4
    glyphs: [
      "\U000F0335", # mdi-lightbulb
      "\U000F1051", # mdi-led-strip
      "\U000F0769", # mdi-ceiling-light
      "\U000F051E" # mdi-timer-off-outline
      ]
    
    #F036C mdi-microphone

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: mdi_80
    size: 80
    bpp: 4
    glyphs: [
      "\U000F04B9", # mdi-sofa
      "\U000F009F", # mdi-bell-ring-outline
      "\U000F07D0" # mdi-home-assistant
      ]

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: mdi_60
    size: 60
    bpp: 4
    glyphs: [
      "\U000F040C", # mdi-play-circle
      "\U000F03E5", # mdi-pause-circle
      ]

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: mdi_40
    size: 40
    bpp: 4
    glyphs: [
      "\U000F04AD", # mdi-skip-next
      "\U000F04AE", # mdi-skip-previous
      ]

button:
  - platform: factory_reset
    id: factory_reset_btn
    internal: true

binary_sensor:
  - platform: gpio
    pin:
      number: 0
      mode: INPUT_PULLUP
      inverted: true
    id: left_top_button
    internal: true
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              else:
                - if:
                    condition:
                      not:
                        voice_assistant.is_running:
                    then:
                      - voice_assistant.start:
                    else:
                      - voice_assistant.stop:
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

  - platform: homeassistant
    id: ha_LIGHT
    entity_id: light.LIGHT_ID
    trigger_on_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: btn_1
          state:
            checked: !lambda return x;

sensor:
  - platform: homeassistant
    id: room_temperature
    entity_id: sensor.TEMP_ID
    on_value:
      then:
        - lvgl.label.update:
            id: room_status
            text:
              format: "%.1fÂ°C | %.0f%%"
              args: [ 'id(room_temperature).state', 'id(room_humidity).state' ]
  - platform: homeassistant
    id: room_humidity
    entity_id: sensor.TEMP_ID
    on_value:
      then:
        - lvgl.label.update:
            id: room_status
            text:
              format: "%.1fÂ°C | %.0f%%"
              args: [ 'id(room_temperature).state', 'id(room_humidity).state' ]  

output:
  - platform: ledc
    pin: GPIO42
    id: backlight_output
    inverted: true 

light:
  - platform: monochromatic
    id: Sled
    name: Screen
    icon: "mdi:television"
    entity_category: config
    output: backlight_output
    restore_mode: ALWAYS_ON
    default_transition_length: 250ms
  - platform: esp32_rmt_led_strip
    id: led
    name: none
    disabled_by_default: false
    entity_category: config
    pin: GPIO48
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

i2c:
  - id: bus_a
    sda: GPIO15
    scl: GPIO14
    scan: true
    frequency: 200kHz
  - id: bus_b
    sda: GPIO11
    scl: GPIO07
    scan: true
    frequency: 200kHz

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO45
    i2s_bclk_pin: GPIO9
    i2s_mclk_pin: GPIO16

audio_dac:
  - platform: es8311
    id: es8311_dac
    bits_per_sample: 16bit
    sample_rate: 16000
    i2c_id: bus_a

microphone:
  - platform: i2s_audio
    id: box_mic
    sample_rate: 16000
    i2s_din_pin: GPIO10
    bits_per_sample: 16bit
    adc_type: external
    channel: left

speaker:
  - platform: i2s_audio
    id: box_speaker
    i2s_dout_pin: GPIO8
    dac_type: external
    sample_rate: 48000
    bits_per_sample: 16bit
    channel: left
    audio_dac: es8311_dac
    buffer_duration: 100ms

media_player:
  - platform: speaker
    name: None
    id: speaker_media_player
    volume_min: 0.5
    volume_max: 0.8
    announcement_pipeline:
      speaker: box_speaker
      format: FLAC
      sample_rate: 48000
      num_channels: 1
    files:
      - id: timer_finished_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/timer_finished.flac
    on_announcement:
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - wait_until:
                      - not:
                          voice_assistant.is_running:
    on_idle:
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - script.execute: start_wake_word

micro_wake_word:
  id: mww
  models:
    - okay_nabu
    - hey_mycroft
    - hey_jarvis
    - alexa
  on_wake_word_detected:
    - voice_assistant.start:
        wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  media_player: speaker_media_player
  micro_wake_word: mww
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_listening:
    - light.turn_on:
        id: led
        brightness: 60%
        red: 0%
        green: 100%
        blue: 0%
        effect: "Slow Pulse"
    - lvgl.page.show:
        id: ai_page
  on_stt_vad_end:
    - light.turn_on:
        id: led
        brightness: 60%
        red: 0%
        green: 0%
        blue: 100%
        effect: "Slow Pulse"
  on_stt_end:
    - script.execute:
        id: add_chat_bubble
        message_text: !lambda return x;
        is_request: true
  on_tts_start:
    - script.execute:
        id: add_chat_bubble
        message_text: !lambda return x;
        is_request: false
    - light.turn_on:
        id: led
        brightness: 60%
        red: 0%
        green: 0%
        blue: 100%
        effect: "Slow Pulse"
#  on_tts_end:
#    - homeassistant.service:
#        service: media_player.play_media
#        data:
#          entity_id: media_player.MEDIA_PLAYER_ID
#          media_content_id: !lambda return x;
#          media_content_type: music
#          announce: "true"
  on_end:
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    - wait_until:
        - and:
            - not: {media_player.is_announcing: }
            - not: {speaker.is_playing: }
    - if:
        condition:
          - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - micro_wake_word.start:
    - light.turn_off:
        id: led
    - lambda: |-
        // Call the LVGL function to reset the inactivity timer.
        lv_disp_trig_activity(NULL);
  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - light.turn_on:
              id: led
              brightness: 60%
              red: 100%
              green: 0%
              blue: 0%
              effect: "Fast Pulse"
          - delay: 3s
          - light.turn_off:
              id: led
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: start_wake_word
  on_client_disconnected:
    - script.execute: stop_wake_word
  on_timer_started:
    - lvgl.page.show:
        id: timer_page
    - script.execute: update_timer_page
  on_timer_cancelled:
    - script.execute: update_timer_page
  on_timer_updated:
    - script.execute: update_timer_page
  on_timer_tick:
    - script.execute: update_timer_page
  on_timer_finished:
    - lvgl.page.show:
        id: timer_page
    - switch.turn_on: timer_ringing
    - wait_until:
        media_player.is_announcing:
    - script.execute: update_timer_page

script:
  - id: start_wake_word
    then:
      - if:
          condition:
            and:
              - not: {voice_assistant.is_running: }
              - lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - micro_wake_word.start:
      - if:
          condition:
            and:
              - not: {voice_assistant.is_running: }
              - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
  - id: stop_wake_word
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - micro_wake_word.stop:
  - id: update_timer_page
    then:
      - lambda: |-
          const auto timers = id(va).get_timers();

          if (timers.empty()) {
            lv_arc_set_value(id(arc_timer), 0);
            lv_label_set_text(id(label_timer), "00:00");
            return;
          }

          // In a single loop, find the most relevant timer to display.
          // We prioritize the active timer that will finish soonest.
          // If no timers are active, we find the paused timer that will finish soonest.
          const voice_assistant::Timer* active_timer_to_show = nullptr;
          const voice_assistant::Timer* paused_timer_to_show = nullptr;

          for (const auto& pair : timers) {
            const auto& timer = pair.second;
            if (timer.is_active) {
              if (active_timer_to_show == nullptr || timer.seconds_left < active_timer_to_show->seconds_left) {
                active_timer_to_show = &timer;
              }
            } else {
              if (paused_timer_to_show == nullptr || timer.seconds_left < paused_timer_to_show->seconds_left) {
                paused_timer_to_show = &timer;
              }
            }
          }

          // Now, display the timer we found (if any).
          if (active_timer_to_show != nullptr) {
            // An active timer takes priority.
            int percent = round(100.0 * active_timer_to_show->seconds_left / max(active_timer_to_show->total_seconds, static_cast<uint32_t>(1)));
            lv_arc_set_value(id(arc_timer), percent);
            
            int hours_left = floor(active_timer_to_show->seconds_left / 3600);
            int minutes_left = floor((active_timer_to_show->seconds_left - hours_left * 3600) / 60);
            int seconds_left = active_timer_to_show->seconds_left - hours_left * 3600 - minutes_left * 60;
            char buffer[10];
            if (hours_left > 0) {
              sprintf(buffer, "%02d:%02d", hours_left, minutes_left);
            } else {
              sprintf(buffer, "%02d:%02d", minutes_left, seconds_left);
            }
            lv_label_set_text(id(label_timer), buffer);

          } else if (paused_timer_to_show != nullptr) {
            // No active timers, but there is a paused one.
            
            int percent = round(100.0 * paused_timer_to_show->seconds_left / max(paused_timer_to_show->total_seconds, static_cast<uint32_t>(1)));
            lv_arc_set_value(id(arc_timer), percent);
          }
  - id: add_chat_bubble
    mode: queued
    parameters:
      message_text: string
      is_request: bool
    then:
      - lambda: |-
          lv_obj_t *parent = id(chat_container);

          lv_obj_t *new_bubble = lv_obj_create(parent);

          lv_obj_t *scroll_item = new_bubble;

          uint32_t child_count = lv_obj_get_child_cnt(parent);

          // Only keep 10 chat items
          if (child_count > 10) {
            lv_obj_t *oldest_child = lv_obj_get_child(parent, 0);
            lv_obj_del_async(oldest_child);
          }
          
          if (is_request) {
            lv_obj_add_style(new_bubble, id(style_chat_row_box), 0);
            lv_obj_set_layout(new_bubble, LV_LAYOUT_FLEX);
            lv_obj_set_flex_align(new_bubble, LV_FLEX_ALIGN_END, LV_FLEX_ALIGN_END, LV_FLEX_ALIGN_END);
            scroll_item = new_bubble;
            new_bubble = lv_obj_create(new_bubble);
            lv_obj_add_style(new_bubble, id(style_bubble_right), 0);
          } else {
            lv_obj_add_style(new_bubble, id(style_bubble_left), 0);
          }
          lv_obj_clear_flag(new_bubble, LV_OBJ_FLAG_SCROLLABLE);

          lv_obj_t *new_label = lv_label_create(new_bubble);
          //lv_obj_set_style_max_width(new_label, 200, 0);
          if (message_text.length() > 25) { //Fix for max width not working
            lv_obj_set_width(new_label, 200);
          }          
          lv_label_set_text(new_label, message_text.c_str());

          lv_obj_scroll_to_view(scroll_item, LV_ANIM_ON);

switch:
  - platform: template
    name: Mute
    id: mute
    icon: "mdi:microphone-off"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - microphone.unmute:
    on_turn_on:
      - microphone.mute:
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      - lambda: |-
            id(speaker_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
              .set_announcement(true)
              .perform();
            id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      - media_player.stop:
          announcement: true
      - light.turn_off:
          id: led
      - lvgl.widget.hide:
        - id: btn_timer_end
      - lvgl.widget.show:
        - id: label_timer
    on_turn_on:      
      - lvgl.widget.show:
        - id: btn_timer_end
      - lvgl.widget.hide:
        - id: label_timer
      - lambda: |-
            id(speaker_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_sound
          announcement: true
      - light.turn_on:
          id: led
          brightness: 60%
          red: 100%
          green: 100%
          blue: 0%
          effect: "Fast Pulse"
      - delay: 15min
      - switch.turn_off: timer_ringing
  - platform: gpio
    name: "Speaker Enable"
    pin: GPIO46
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    name: Antiburn
    id: switch_antiburn
    icon: mdi:television-shimmer
    optimistic: true
    entity_category: "config"
    turn_on_action:
      - logger.log: "Starting Antiburn"
      - if:
          condition: lvgl.is_paused
          then:
            - lvgl.resume:
            - lvgl.widget.redraw:
      - lvgl.pause:
          show_snow: true
    turn_off_action:
      - logger.log: "Stopping Antiburn"
      - if:
          condition: lvgl.is_paused
          then:
            - lvgl.resume:
            - lvgl.widget.redraw:

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    icon: "mdi:account-voice"
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            #- wait_until:
            #    lambda: return id(voice_assistant_phase) == ${voice_assist_muted_phase_id} || id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
            - if:
                condition:
                  lambda: return x == "In Home Assistant";
                then:
                  - micro_wake_word.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - lambda: id(va).set_use_wake_word(true);
                        - voice_assistant.start_continuous:
            - if:
                condition:
                  lambda: return x == "On device";
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - micro_wake_word.start

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"

spi:
  - id: spi_bus
    clk_pin: 4
    mosi_pin: 2

display:
  - platform: ili9xxx
    id: my_lcd
    model: ST7789V
    invert_colors: true
    data_rate: 40MHz
    cs_pin: 5
    dc_pin: 47
    reset_pin: 38
    dimensions:
        height: 240
        width: 240

touchscreen:
  platform: cst816
  id: my_touchscreen
  i2c_id: bus_b
  interrupt_pin: GPIO12
  reset_pin: GPIO6
  on_release:
    then:
      - if:
          condition: lvgl.is_paused
          then:
            - lvgl.resume:
            - lvgl.widget.redraw:
            - light.turn_on: Sled
